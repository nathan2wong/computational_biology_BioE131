%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.9
%%CreationDate: Tue Sep 25 20:35:04 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGCAGGUACAUACAGCUGAUGAGUCCCAAAUAGGACGAAACGCGACACACACCACUAAACCGUGCAGUGUUUUGCGUCCUGUAUUCCACUGC\
) def
/coor [
[67.91688538 323.14099121]
[70.75688934 303.96850586]
[71.26350403 288.97708130]
[71.77011108 273.98562622]
[72.27672577 258.99420166]
[59.56433105 251.23141479]
[52.39669418 238.06019592]
[52.78673935 222.97000122]
[60.72982025 210.01606750]
[74.17809296 202.72969055]
[74.68470764 187.73825073]
[75.19132233 172.74681091]
[75.69792938 157.75537109]
[76.20454407 142.76393127]
[76.71115875 127.77248383]
[72.58656311 142.19425964]
[60.49701691 151.07362366]
[45.50180435 150.69468689]
[33.87617493 141.21603394]
[30.48526573 126.60433960]
[36.74811935 112.97434998]
[50.04383087 106.02999115]
[64.80946350 108.67799377]
[51.12697220 102.53068542]
[37.44447708 96.38337708]
[23.76198387 90.23607635]
[9.07924557 96.08353424]
[-5.40456533 89.75939178]
[-11.09646225 75.01565552]
[-4.61954355 60.59951401]
[10.18354988 55.06381607]
[24.53040504 61.69278717]
[29.90928841 76.55358124]
[43.59178162 82.70088959]
[57.27427673 88.84819031]
[70.95677185 94.99549866]
[77.79999542 83.59537506]
[88.37555695 77.03918457]
[99.93077087 76.13216400]
[109.82312775 80.31463623]
[120.69502258 69.98013306]
[131.56690979 59.64562988]
[142.43879700 49.31112289]
[153.31069946 38.97661972]
[164.18258667 28.64211655]
[168.85411072 13.52631569]
[183.40948486 10.36558533]
[194.28137207 0.03108188]
[205.15327454 -10.30342197]
[216.02516174 -20.63792610]
[216.58837891 -36.20457458]
[227.76124573 -46.53035736]
[242.59819031 -45.89748001]
[253.47009277 -56.23198318]
[264.34197998 -66.56648254]
[264.49172974 -82.37006378]
[275.83081055 -93.37919617]
[291.63192749 -93.06235504]
[302.52056885 -81.60752106]
[302.03668213 -65.81064606]
[290.46737671 -55.04372787]
[274.67648315 -55.69459534]
[263.80459595 -45.36008835]
[252.93269348 -35.02558517]
[252.81329346 -20.17562485]
[241.93486023 -9.54009533]
[226.35966492 -9.76603413]
[215.48777771 0.56846988]
[204.61587524 10.90297413]
[193.74398804 21.23747826]
[189.85009766 35.61408615]
[174.51708984 39.51400757]
[163.64520264 49.84851456]
[152.77330017 60.18301773]
[141.90141296 70.51751709]
[131.02952576 80.85202789]
[120.15763092 91.18653107]
[119.31414032 117.00854492]
[91.70259857 128.27909851]
[91.19598389 143.27053833]
[90.68937683 158.26197815]
[90.18276215 173.25341797]
[89.67614746 188.24487305]
[89.16954041 203.23631287]
[102.09523010 211.41394043]
[109.14567566 224.87455750]
[108.51609039 239.95666504]
[100.47562408 252.61395264]
[87.26816559 259.50079346]
[86.76155853 274.49224854]
[86.25494385 289.48367310]
[85.74832916 304.47512817]
] def
/pairs [
[2 92]
[3 91]
[4 90]
[5 89]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 79]
[23 36]
[24 35]
[25 34]
[26 33]
[40 77]
[41 76]
[42 75]
[43 74]
[44 73]
[45 72]
[47 70]
[48 69]
[49 68]
[50 67]
[53 64]
[54 63]
[55 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
